Class Form.Installer
{

Parameter SourcePath = "/opt/restforms2/src/";

Parameter Namespace = "RESTFORMS2";

Parameter CreateNamespace = "yes";

Parameter DataDBPath = "/opt/restforms2/db/DATA";

Parameter CodeDBPath = "/opt/restforms2/db/APP";

Parameter CreateWebApp = "yes";

Parameter WebApp = "/forms";

Parameter EnableUnitTestPortal = "yes";

XData Install
{
<Manifest>
    <If Condition='"${CreateNamespace}"="yes"'>
        <Log Text="Creating namespace ${Namespace}" Level="0"/> 
        <Namespace Name="${Namespace}" Create="yes" Ensemble=""> 
            <Configuration> 
                <Database Name="${Namespace}-DATA" Dir="${DataDBPath}" Create="yes" MountRequired="true" Resource="%DB_DEFAULT" PublicPermissions="RW" MountAtStartup="true"/> 
                <Database Name="${Namespace}-APP" Dir="${CodeDBPath}" Create="yes" MountRequired="true" Resource="%DB_DEFAULT" PublicPermissions="RW" MountAtStartup="true"/> 
            </Configuration>
            <Import File="${SourcePath}Form.inc" Recurse="1" Flags="cuk" />
            <Import File="${SourcePath}" Recurse="1" Flags="cuk" />
        </Namespace>
    </If>
    <If Condition='"${CreateNamespace}"="no"'>
        <Log Text="Using namespace ${Namespace}" Level="0"/> 
        <Namespace Name="${Namespace}" Create="no" Ensemble=""> 
            <Import File="${SourcePath}Form.inc" Recurse="1" Flags="cuk" />
            <Import File="${SourcePath}" Recurse="1" Flags="cuk" />
        </Namespace>
    </If>
</Manifest>
}

/// This is a method generator whose code is generated by XGL. 
ClassMethod RunManifest(ByRef pVars, pLogLevel As %Integer = 0, pInstaller As %Installer.Installer) As %Status [ CodeMode = objectgenerator, Internal ]
{
    Quit ##class(%Installer.Manifest).%Generate(%compiledclass, %code, "Install")
}

/// Installer Entry point    
ClassMethod Run(ByRef vars) As %Status
{
    try { 
        set previousNamespace = $namespace
        write "START INSTALLER",! 

        // set default values for installer variables
        for ivar="SourcePath","Namespace","CreateNamespace","CreateDB","DataDBPath","CodeDBPath","CreateWebApp","WebApp","EnableUnitTestPortal" {
            if '$data(vars(ivar)) set vars(ivar)=$parameter($classname(), ivar)
        } 
        $$$ThrowOnError(..RunManifest(.vars)) 

        // create web application
        if vars("CreateWebApp")="yes" { 
            $$$ThrowOnError(..CreateWebApp(vars("Namespace"), vars("WebApp")))
        }

        // enable UnitTest Portal for APP namespace
        if vars("EnableUnitTestPortal")="yes" { 
            zn "%SYS"
            set defaultApp = $system.CSP.GetDefaultApp(vars("Namespace"))
            set ^SYS("Security","CSP","AllowPrefix",defaultApp,"%UnitTest")=1
            write !,"UnitTest Portal enabled on "_vars("Namespace")_" ("_defaultApp_")"
        }

        if sc {
            write !,"INSTALLER SUCCESS",!
            set $namespace = previousNamespace

        } else {
            do $SYSTEM.Process.Terminate($JOB,1)
        }

    } catch ex { 
        set sc = ex.AsStatus() 
        write $System.Status.GetErrorText(sc),! 
        do $SYSTEM.Process.Terminate($JOB,1) 
    } 
    quit sc
}

/// Create web application
ClassMethod CreateWebApp(pNamespace As %String, pWebApp As %String) As %Status
{
  set ret = $$$OK
  try {
    zn "%SYS" 
    set webName = pWebApp 
    set webProperties("DispatchClass") = "Form.REST.Main" 
    set webProperties("NameSpace") = pNamespace 
    set webProperties("Enabled") = 1 
    set webProperties("AutheEnabled") = 32 
    $$$ThrowOnError(##class(Security.Applications).Create(webName, .webProperties))

    write !,"Web application "_webName_" has been created!"
  } catch ex {
    set ret = ex.AsStatus()
  } 
  quit ret
}

}
